{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","src","alt","href","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAoFeA,0LA/EX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,IAAI,SACxBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,8CACzBF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,6DAGPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,4QACAF,EAAAC,EAAAC,cAAA,0XAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,mEAA0DF,EAAAC,EAAAC,cAAA,WAA1D,gBAA6EF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,mBAAR,gBAA7E,aAAiIN,EAAAC,EAAAC,cAAA,KAAGI,KAAK,8BAAR,yBAGnIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,oBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,SACEH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBAEAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2BAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,OACAH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0BAKRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,8BAA6BN,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gBAEhDJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,uDAAuDC,OAAO,UAASP,EAAAC,EAAAC,cAAA,OAAKE,IAAI,eAE1FJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAIN,EAAAC,EAAAC,cAAA,OAAKE,IAAI,yBAzEfI,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4fd870e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <img src=\"logo.png\" alt=\"logo\" />\n          <div className=\"subhead\"><b>Located inside Fariba Beauty Lab</b></div>\n          <div><strong>3456 Motor Ave #103 Los Angeles, CA 90034</strong></div>\n        </div>\n\n        <div className=\"about\">\n          <p>Stripless Wax is a private body waxing studio. Owner and founder, Alexandra Cristobal has mastered an almost painless body waxing experience. Hard wax, paired with skill, expertise, techniques and products to achieve the 'ultimate' body waxing experience.</p>\n          <p>Alexandra, originally an LA girl who moved to Miami and then back to LA, has more than 10 years experience. Her formal education was obtained in both cities. She had the added privilege of private training with an expert in Brazilian body waxing. Alexandra is proud to provide her clients with only the best products along with painless body waxing and skin care. </p>\n        </div>\n\n        <div className=\"book\">\n          <p>For the fastest and easiest way to book an appointment,<br /> please text <a href=\"tel:13052050119\">305-205-0119</a> or email <a href=\"mailto:justwaxme@gmail.com\">justwaxme@gmail.com</a></p>\n        </div>\n\n        <div className=\"services\">\n          <div className=\"subhead\">Services Offered</div>\n          <div className=\"lists\">\n            <div className=\"list\">\n            <div className=\"subhead\">Women</div>\n              <ul>\n                <li>Brows</li>\n                <li>Lip</li>\n                <li>Nose</li>\n                <li>Chin</li>\n                <li>Face</li>\n\n                <li>Underarms</li>\n                <li>Belly Strip</li>\n                <li>Tummy</li>\n\n                <li>Half Arm</li>\n                <li>Full Arm</li>\n\n                <li>Bikini Line</li>\n                <li>Deep Bikini</li>\n                <li>Brazilian</li>\n                <li>Full Bikini</li>\n                <li>Back Side / Butt Strip</li>\n                <li>Full Tush</li>\n\n                <li>Half Legs</li>\n                <li>Full Legs</li>\n                <li>Feet & Toes</li>\n              </ul>\n            </div>\n            <div className=\"list\">\n              <div className=\"subhead\">Men</div>\n              <ul>\n                <li>Back</li>\n                <li>Chest</li>\n                <li>Ears</li>\n                <li>Nose</li>\n                <li>Half Arm</li>\n                <li>Full Arm</li>\n                <li>Half Leg</li>\n                <li>Full Leg</li>\n              </ul>\n          </div>\n        </div>\n        </div>\n        <div className=\"links\">\n          <div>\n            <a href=\"mailto:justwaxme@gmail.com\"><img src=\"email.png\" /></a>\n          </div>\n          <div>\n            <a href=\"https://www.yelp.com/biz/stripless-wax-los-angeles-2\" target=\"_blank\"><img src=\"yelp.png\" /></a>\n          </div>\n          <div>\n            <a href=\"#\"><img src=\"insta.png\" /></a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}